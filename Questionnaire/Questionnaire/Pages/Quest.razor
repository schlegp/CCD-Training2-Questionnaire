@page "/questionnaire"
@using Questionnaire.Models
@using Questionnaire.Component
@using Questionnaire.Services
@inject RefreshService refresh



@if (Questions == null)
{
    <Spinner Size=@SpinnerSize.Medium Label="Loading Questions ..." LabelPosition=@SpinnerLabelPosition.Bottom></Spinner>
}
else if (currentScore != null)
{

    <div><b>@currentScore.CountCorrect out of @currentScore.AnswerStates.Count() questions answered correctly (@currentScore.Percentage%)</b></div>
    @foreach (var answerState in currentScore.AnswerStates)
    {
        <div style="overflow:auto">
            <h4>@answerState.Question.Text</h4>
            @if (answerState.GivenAnswer == answerState.CorrectAnswer)
            {
                <div><h5>Your answer '@answerState.GivenAnswer.Text' is correct</h5></div>
            }
            else
            {
                <div><h5>Your answer '@answerState.GivenAnswer?.Text' is wrong</h5><div>Correct answer: '@answerState.CorrectAnswer.Text'</div></div>
            }
        </div>
    }
}
else
{
    <div name="mainThing" class="site questionSite">
        <div class="questHead">
            <h1>Questionnaire</h1>
        </div>
        <QuestionWindowComponent Questions="Questions"></QuestionWindowComponent>
        <div class="questFooter">
            <BlazorFabric.PrimaryButton Style="margin:2em 2em 2em 0em" Text="Submit" OnClick="@Submit" />
        </div>
    </div>
}

@code {
    private int currentCount = 0;

    private QuestionHandler qHandler;
    private QuestionnaireEvaluator evaluator;
    private Score currentScore;

    private IEnumerable<Question> Questions;

    private bool canNotSubmit = true;

    protected override void OnInitialized()
    {
        qHandler = new QuestionHandler();
        evaluator = new QuestionnaireEvaluator();
        Questions = qHandler.Provide();


        base.OnInitialized();
    }

    private void Submit()
    {
        currentScore = evaluator.Evaluate(Questions);
    }

}
